/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id "org.sonarqube" version "2.7"
    id 'application'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
    id "com.github.spotbugs" version "4.5.1"
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.0-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

application {
    mainClassName = 'bridge_crane_project.TestDrive.DJTestDrive'
}

jar {
	manifest {
		attributes 'Main-Class': 'bridge_crane_project.TestDrive.DJTestDrive'
	}
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.05
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

checkstyle {
    ignoreFailures = true
    toolVersion = '7.8.1'
    configFile file("config/checkstyle/checkstyle.xml")
}

checkstyleMain {
    source = 'src/main/java'
}

checkstyleTest {
    source = 'src/test/java'
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

pmd {
    ignoreFailures = true
}

tasks.withType(Pmd) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugs {
    ignoreFailures = true
    //showStackTraces = true
    //showProgress = true
    //effort = 'default'
    //reportLevel = 'default'
}

spotbugsMain {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            //stylesheet = 'fancy-hist.xsl'
        }
    }
}

/* findbugs {
    ignoreFailures = true
    toolVersion = "3.0.1"
    sourceSets=[sourceSets.main]
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
    reportLevel = "low"
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
} */

/*task(runSimple, dependsOn: 'classes', type: JavaExec) {
   main = 'com.mrhaki.java.Simple'
   classpath = sourceSets.main.runtimeClasspath
   args 'mrhaki'
   systemProperty 'simple.message', 'Hello '
}*/