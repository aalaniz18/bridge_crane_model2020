
plugins {
    id 'java-library'
    id "org.sonarqube" version "2.7"
    id 'application'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
    id "de.aaschmid.cpd" version "3.1"
    id "com.github.spotbugs" version "4.5.1"
}

repositories {
    jcenter()
}

dependencies {
    api 'org.apache.commons:commons-math3:3.6.1'
    implementation 'com.google.guava:guava:28.0-jre'
    testImplementation 'junit:junit:4.12'
    testImplementation 'io.cucumber:cucumber-java:6.8.1'
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

// Jar configurations
application {
    mainClassName = 'bridge_crane_project.TestDrive.ExchangableTestDrive'
}

task ExchangableTestDrive(type: Jar) {
    manifest {
        attributes 'Main-Class': 'bridge_crane_project.TestDrive.ExchangableTestDrive'
    }
    archiveBaseName = 'ExchangableTestDrive'
    from {
        configurations.compileClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
}

task BridgeCraneTestDrive(type: Jar) {
    manifest {
        attributes 'Main-Class': 'bridge_crane_project.TestDrive.BridgeCraneTestDrive'
    }
    archiveBaseName = 'BridgeCraneTestDrive'
    from {
        configurations.compileClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
}

task DJTestDrive(type: Jar) {
    manifest {
        attributes 'Main-Class': 'bridge_crane_project.TestDrive.DJTestDrive'
    }
    archiveBaseName = 'DJTestDrive'
    from {
        configurations.compileClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
}

task HeartTestDrive(type: Jar) {
    manifest {
        attributes 'Main-Class': 'bridge_crane_project.TestDrive.HeartTestDrive'
    }
    archiveBaseName = 'HeartTestDrive'
    from {
        configurations.compileClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
}

task SimultaneousTestDrive(type: Jar) {
    manifest {
        attributes 'Main-Class': 'bridge_crane_project.TestDrive.SimultaneousTestDrive'
    }
    archiveBaseName = 'SimultaneousTestDrive'
    from {
        configurations.compileClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
}

build.dependsOn BridgeCraneTestDrive
build.dependsOn DJTestDrive
build.dependsOn HeartTestDrive
build.dependsOn SimultaneousTestDrive
build.dependsOn ExchangableTestDrive
/**********************************************************************************/

// Cucumber configurations
configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

task cucumber() {
    dependsOn assemble, testClasses
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'gradle.cucumber', 'src/test/resources']
        }
    }
}
/**********************************************************************************/

// Jacoco configurations
jacocoTestReport {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'INSTRUCTION'
                minimum = 0.75
            }
        }
        rule {
            limit {
                counter = 'BRANCH'
                minimum = 0.50
            }
        }
    }
}

/**********************************************************************************/
check.dependsOn jacocoTestCoverageVerification
check.dependsOn jacocoTestReport
check.dependsOn cucumber

// Checkstyle configurations
checkstyle {
    ignoreFailures = true
    toolVersion = '7.8.1'
    configFile file("config/checkstyle/checkstyle.xml")
    showViolations = false
}
checkstyleMain {
    source = 'src/main/java'
    maxErrors = 75
}
checkstyleTest {
    source = 'src/test/java'
    maxErrors = 120
}
tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
/**********************************************************************************/

// Pmd configurations
pmd {
    ignoreFailures = true
    //rulePriority = 1      // Ademas se activa con ignoreFailures en true
}

tasks.withType(Pmd) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
/**********************************************************************************/

// Spotbugs configurations
spotbugsMain {
    ignoreFailures = true
    showStackTraces = false
    effort = 'max'
    reportLevel = 'high'
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

spotbugsTest {
    ignoreFailures = true
    showStackTraces = false
    effort = 'max'
    reportLevel = 'high'
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugsTest.html")
            stylesheet = 'fancy.xsl'
        }
    }
}
/**********************************************************************************/

// Cpd configurations
cpd {
    language = 'java'
    ignoreFailures = true
}

cpdCheck {
    reports {
        xml.enabled = false
        text.enabled = true
    }
}
